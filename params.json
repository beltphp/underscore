{"name":"Belt.Underscore","tagline":"Pushing square things down round holes.","body":"# Belt.`Underscore`\r\n\r\n> Pushing round things down square holes.\r\n\r\nBelt`.Underscore` is an utility library that makes working with arrays in PHP\r\na little bit more pleasant.\r\n\r\n## Installation\r\n\r\nVia Composer\r\n\r\n```shell\r\n$ composer require belt/underscore\r\n```\r\n\r\n## Usage\r\n\r\nThe following examples assume that you have included the Underscore utility:\r\n\r\n```php\r\nuse Belt\\_;\r\n```\r\n\r\nSome of the examples might seem a bit contrived, but they're actually really\r\nhandy. For example, let's say that we have a fictional social network and (for\r\nsome reason) we want to get the names of all the authenticated user's 2nd\r\ndegree friends (friends-of-friends) that are over the age of 18. Suddenly, that\r\nbecomes real easy!\r\n\r\n```php\r\n_::create($user->getFriends())->map(function ($f) {\r\n    return $f->getFriends();\r\n})->select(function ($f) {\r\n    return $f->getAge() > 18;\r\n})->pluck('username');\r\n```\r\n\r\nAnd now (for some even stranger reason) we want to know the total number of\r\n_third_ degree friends (friends-of-friends-of-friends) of the 2nd degree friends\r\nthat are over the age of 18.\r\n\r\n```php\r\n_::create($user->getFriends())->map(function ($f) {\r\n    return $f->getFriends();\r\n})->select(function ($f) {\r\n    return $f->getAge() > 18;\r\n})->reduce(function ($s, $f) {\r\n    return $s + count($f->getFriends());\r\n});\r\n```\r\n\r\nThat's it!\r\n\r\n> __Note__: When, in the examples, the return value comment indicates an array\r\n> the actual return value is a new Underscore instance! You can get the actual\r\n> PHP array value by calling the `toArray` method.\r\n\r\n#### `all`\r\n\r\nCall the given `callback` for each element in the container. Should the callback\r\nreturn `false`, the method immediately returns `false` and ceases enumeration.\r\nIf all invocations of the callback return `true`, `all` returns `true`.\r\n\r\n```php\r\n_::create([1, 2, 3])->all(function ($n) {\r\n    return $n > 0;\r\n}); // true\r\n```\r\n\r\n#### `any`\r\n\r\nCall the given `callback` for each element in the container. Should the callback\r\nreturn `true`, the method immediately returns `true` and enumeration is ceased.\r\nIf all invocations of the callback return `false`, `any` returns `false`.\r\n\r\n```php\r\n_::create([1, 2, 3])->any(function ($n) {\r\n    return $n > 2;\r\n}); // true\r\n```\r\n\r\n#### `chunk`\r\n\r\nChunks the container into a new array of `n`-sized chunks.\r\n\r\n```php\r\n_::create([1, 2, 3, 4])->chunk(2); // [[1, 2], [3, 4]]\r\n```\r\n\r\n#### `concat`\r\n\r\nReturns a new array that is the container with the given `array` concatenated\r\nto the end.\r\n\r\n```php\r\n_::create([1, 2])->concat([3, 4]); // [1, 2, 3, 4]\r\n```\r\n\r\n#### `dict`\r\n\r\nConvert an array of key/value pairs into the logical dictionary.\r\n\r\n```php\r\n_::create([[1, 2], [3, 4]])->dict(); // [1 => 2, 3 => 4]\r\n```\r\n\r\nIf you have a flat array you can call `chunk(2)` before `dict`.\r\n\r\n```php\r\n_::create([1, 2, 3, 4])->chunk(2)->dict(); // [1 => 2, 3 => 4]\r\n```\r\n\r\n#### `each`\r\n\r\nCalls the given callback once for each element in the container, passing that\r\nelement as the argument.\r\n\r\n```php\r\n_::create([1, 2, 3, 4])->each(function ($n) {\r\n    printf(\"%d\\n\", $n);\r\n}); // outputs: 1\\n2\\n3\\n4\\n\r\n```\r\n\r\n`each` also supports two and three parameter versions:\r\n\r\n```php\r\n_::create([1, 2, 3, 4])->each(function ($n, $i) {\r\n    printf(\"%d: %d\\n\", $i, $n);\r\n}); //outputs: 0: 1\\n1: 2\\n2: 3\\n3: 4\\n\r\n\r\n_::create([1, 2, 3, 4]->each(function ($n, $i, $array) {\r\n    // ...\r\n}));\r\n```\r\n\r\n#### `find`\r\n\r\nPasses each entry in the container to the given callback, returning the first\r\nelement for which callback is not `false`. If no entry matches, returns `null`.\r\n\r\n```php\r\n_::create([1, 2, 3, 4])->find(function ($n) {\r\n    return $n > 2;\r\n}); // 3\r\n```\r\n\r\n#### `first`\r\n\r\nReturns the first `n` elements in the container.\r\n\r\n```php\r\n_::create([1, 2, 3, 4])->first(2); // [1, 2]\r\n```\r\n\r\n#### `flatten`\r\n\r\nReturns a new, one-dimensional array that is a recursive flattening of the\r\ncontainer.\r\n\r\n```php\r\n_::create([1, [2], [3, [4]]])->flatten(); [1, 2, 3, 4]\r\n```\r\n\r\n#### `flatMap`\r\n\r\nReturns a new array with the concatenated results of invoking the callback\r\nonce for every element in the container.\r\n\r\n```php\r\n_::create([1, 2, 3, 4])->flatMap(function ($n) {\r\n    return [$n, $n];\r\n}); // [1, 1, 2, 2, 3, 3, 4, 4]\r\n\r\n_::create([1, 2, 3, 4])->flatMap(function ($n) {\r\n    return [$n, [$n]];\r\n}); // [1, [1], 2, [2], 3, [3], 4, [4]]\r\n```\r\n\r\n#### `groupBy`\r\n\r\nGroups the container by result of the given callback.\r\n\r\n```php\r\n_::create([1, 2, 3, 4])->groupBy(function ($n) {\r\n    return $n % 2;\r\n}); // [0 => [2, 4], 1 => [1, 3]]\r\n\r\n_::create(['foo', 'bar', 'baz'])->groupBy(function ($s) {\r\n    return $s[0];\r\n}); // ['f' => ['foo'], 'b' => ['bar', 'baz']]\r\n```\r\n\r\n#### `has`\r\n\r\n```php\r\n_::create([1, 2, 3, 4])->has(2); // true\r\n_::create([1, 2, 3, 4])->has(0); // false\r\n```\r\n\r\n#### `indexOf`\r\n\r\nReturns the index of the given object in the container or `null` if the element\r\nwas not found.\r\n\r\n```php\r\n_::create([1, 2, 3, 4])->indexOf(2); // 1\r\n_::create([1, 2, 3, 4])->indexOf(0); // null\r\n```\r\n\r\n#### `inject`\r\n\r\nCombines all elements of the container by applying a binary operation.\r\n\r\n```php\r\n_::create([1, 2, 3])->inject([], function ($m, $n) {\r\n    $m[$n] = $n * $n;\r\n\r\n    return $m;\r\n}); // [1 => 1, 2 => 4, 3 => 9]\r\n\r\n_::create(['foo', 'bar', 'baz'])->inject('', function ($m, $s) {\r\n    $m .= $s;\r\n}); // foobarbaz\r\n```\r\n\r\n> __Note__: This is the only exception to the note earlier. The return value\r\n> here is the return value of the _last_ itertation.\r\n\r\n#### `join`\r\n\r\nReturns a string of all the container's elements joined with the provided\r\nseparator string.\r\n\r\n```php\r\n_::create([1, 2, 3, 4])->join('');  // 1234\r\n_::create([1, 2, 3, 4])->join(','); // 1,2,3,4\r\n```\r\n\r\n#### `last`\r\n\r\nReturns the last `n` elements from the container.\r\n\r\n```php\r\n_::create([1, 2, 3, 4, 5, 6])->last(2); // [5, 6]\r\n```\r\n\r\n#### `map`\r\n\r\nInvokes the given callback for each element in the container. Creates a new\r\narray containing the values returned by the block.\r\n\r\nIf the given callback returns `null`, that element is skipped in the returned\r\narray.\r\n\r\n```php\r\n_::create([1, 2, 3, 4])->map(function ($n) {\r\n    return $n * $n;\r\n}); // [1, 4, 9, 16]\r\n\r\n_::create([1, 2, 3, 4])->map(function ($n) {\r\n    return $n % 2 ? $n * $n : null;\r\n}); // [1, 9]\r\n```\r\n\r\n#### `max`\r\n\r\nReturns the element for which the given callback returns the largest integer.\r\n\r\n```php\r\n_::create('1', 'two', 'three')->max(function ($s) {\r\n    return strlen($s);\r\n}); // 'three'\r\n```\r\n\r\n#### `min`\r\n\r\nReturns the element for which the given callback returns the smallest integer.\r\n\r\n```php\r\n_::create('1', 'two', 'three')->min(function ($s) {\r\n    return strlen($s);\r\n}); // '1'\r\n```\r\n\r\n#### `none`\r\n\r\nTest if the given callback returns `false` for each element in the container.\r\n\r\n```php\r\n_::create([1, 2, 3, 4])->none(function ($n) {\r\n    return $n < 0;\r\n}); // true\r\n\r\n_::create([1, 2, 3, 4])->none(function ($n) {\r\n    return $n > 0;\r\n}); // false\r\n```\r\n\r\n#### `partition`\r\n\r\nPartitions the container into two arrays based on the boolean return value of\r\nthe given block.\r\n\r\n```php\r\n_::create(['A', 'B', 'C', 'AA'])->partition(function ($s) {\r\n    return $s[0] == 'A';\r\n}); // [['A', 'AA'], ['B', 'C']]\r\n```\r\n\r\n#### `pluck`\r\n\r\nReturns a new array that is the result of retrieving the given property path on\r\neach element in the receiver.\r\n\r\n```php\r\n_::create([new User('bob'), new User('alice')])->pluck('username'); // ['bob', 'alice']\r\n```\r\n\r\n#### `reduce`\r\n\r\nReduces the container to a single value.\r\n\r\nThe usual example of reduce is to sum all values in an array.\r\n\r\n```php\r\n_::create([1, 2, 3, 4])->reduce(function ($memo, $n) {\r\n    return $memo + $n;\r\n}); // 10\r\n```\r\n\r\n#### `reject`\r\n\r\nReturns a new array containing all elements for which the given callback\r\nreturns `false`.\r\n\r\n```php\r\n_::create([1, 2, 3, 4])->reject(function ($n) {\r\n    return ($n % 2) == 0;\r\n}); // [1, 3]\r\n```\r\n\r\n#### `reverse`\r\n\r\nReturns a new array that is the container, reversed.\r\n\r\n```php\r\n_::create([1, 2, 3, 4])->reverse(); // [4, 3, 2, 1]\r\n```\r\n\r\n#### `select`\r\n\r\nReturns a new array containing all elements for which the given block returns\r\n`true`.\r\n\r\n```php\r\n_::create([1, 2, 3, 4])->select(function ($n) {\r\n    return ($n % 2) == 0;\r\n}); // [2, 4]\r\n```\r\n\r\n#### `skip`\r\n\r\nSkips the first `n` elements and returns the rest of the array.\r\n\r\n```php\r\n_::create([1, 2, 3, 4, 5, 6])->skip(2); // [3, 4, 5, 6]\r\n```\r\n\r\n#### `slice`\r\n\r\nReturns a subarray consisting of the given number of elements from the given\r\nstarting index.\r\n\r\n```php\r\n_::create([1, 2, 3, 4])->slice(1, 2); // [2, 3]\r\n```\r\n\r\n#### `snip`\r\n\r\nSnips the end off the array. Returns the container _without_ the last `n`\r\nelements.\r\n\r\n```php\r\n_::create([1, 2, 3, 4, 5, 6])->snip(2); // [1, 2, 3, 4]\r\n```\r\n\r\n#### `sort`\r\n\r\nReturns the container, sorted.\r\n\r\n```php\r\n_::create([1, 4, 2, 3])->sort(); // [1, 2, 3, 4]\r\n```\r\n\r\n#### `sortBy`\r\n\r\nSorts all objects using the return value of the given callback as the sorting\r\ncriteria.\r\n\r\n```php\r\n$rhombas = new Shape('rhombas');\r\n$ellipse = new Shape('ellipse');\r\n$hexagon = new Shape('hexagon');\r\n\r\n_::create([ $rhombas, $ellipse, $hexagon ])->sortBy(function ($s) {\r\n    return $s->getName();\r\n}); // [ $ellipse, $hexagon, $rhombas ]\r\n```\r\n\r\n#### `transpose`\r\n\r\nAssumes that the container is an array of arrays and transposes the rows and\r\ncolumns.\r\n\r\n```php\r\n_::create([[1, 2, 3], [4, 5, 6]])->transpose(); // [[1, 4], [2, 5], [3, 6]]\r\n```\r\n\r\n#### `uniq`\r\n\r\nReturns a new array by removing duplicate values in the container.\r\n\r\n```php\r\n_::create([1, 2, 3, 1, 2, 4, 1, 2, 5])->uniq(); // [3, 4, 5]\r\n```\r\n\r\n#### `without`\r\n\r\nReturns a new array where objects in the given array are removed from the\r\nreceiver.\r\n\r\n```php\r\n_::create([1, 2, 4, 3])->without([4]); // [1, 2, 3]\r\n_::create([1, 2, 3, 4, 5])->without([4, 5]); // [1, 2, 3]\r\n```\r\n\r\n#### `pop`\r\n\r\nTreats receiver like a stack and removes the last object, returning it.\r\n\r\n```php\r\n_::create()->push(1)->push(2)->push(3)->pop(); // 3\r\n```\r\n\r\n#### `push`\r\n\r\nTreats container like a stack and adds the given object to the end of the\r\ncontainer.\r\n\r\n```php\r\n_::create()->push(1)->push(2)->push(3); // [1, 2, 3]\r\n```\r\n\r\n#### `shift`\r\n\r\nRemoves the container's first object and returns it.\r\n\r\n```php\r\n_::create([1, 2, 3])->shift(); // 1\r\n```\r\n\r\n#### `unshift`\r\n\r\nInserts the given object at the front of container, moving all other objects in\r\nthe container up one index.\r\n\r\n```php\r\n_::create([2, 3])->unshift(1); // [1, 2, 3]\r\n```\r\n\r\n## Contributing\r\n\r\nPlease see [CONTRIBUTING](https://github.com/beltphp/underscore/blob/master/CONTRIBUTING.md).\r\n\r\n## Credits\r\n\r\nThis project is heavily inspired by [YOLOKit](http://mxcl.github.io/YOLOKit/).\r\nFor all of you who develop in Objective-C, I highly recomment you check it out!\r\n\r\n## License\r\n\r\nPlease see [LICENSE](https://github.com/beltphp/underscore/blob/master/LICENSE).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}